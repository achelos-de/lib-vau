@Library('gematik-jenkins-shared-library') _

String CREDENTIAL_ID_GEMATIK_GIT = 'GITLAB.tst_tt_build.Username_Password'
def REPO_URL = createGitUrl('git/Testtools/ePA/lib-vau')
String TEAMS_URL = 'https://gematikde.webhook.office.com/webhookb2/01cda61b-5c5e-4000-ad6a-7b087feaf0e8@30092c62-4dbf-43bf-a33f-10d21b5b660a/JenkinsCI/f65f14ab85054df6bede10ab3f644ede/3f1bacaa-1f00-4f70-aab5-18e2d8723399'
String BRANCH = 'main'
String JIRA_PROJECT_ID = 'LIBVAU'
String GITLAB_PROJECT_ID = '1470'
String TITLE_TEXT = 'Release'
String ARTIFACT_ID = "lib-vau"
String GROUP_ID_PATH = "de/gematik/epa"
String GROUP_ID = "de.gematik.epa"
String PACKAGING = "pom"
String POM_PATH = "pom.xml"

pipeline {
    options {
        disableConcurrentBuilds()
                buildDiscarder logRotator(artifactNumToKeepStr: '3', numToKeepStr: '3')
    }
    agent { label 'k8-backend-small' }

	parameters {
        string(name: 'NEW_VERSION', defaultValue: '', description: 'Bitte die nächste Version für das Projekt eingeben, format [0-9]+.[0-9]+.[0-9]+ \nHinweis: Version 0.0.[0-9] ist keine gültige Version!')
    }

    environment {
        TAGNAME = 'Release-${RELEASE_VERSION}'
    }

    stages {
        stage('Initialise') {
            steps {
                useJdk("OPENJDK17")
                setProperties([notifyTeams(TEAMS_URL)])
                gitSetIdentity()
            }
        }

        stage('Checkout') {
            steps {
                git branch: BRANCH,
                    credentialsId: CREDENTIAL_ID_GEMATIK_GIT,
                    url: REPO_URL
            }
        }

        stage('set Version') {
            steps {
                mavenSetVersion(RELEASE_VERSION, POM_PATH)
            }
        }

        stage('Build') {
            steps {
                mavenBuild(POM_PATH)
            }
        }

        stage('Test') {
            steps {
                mavenTest(POM_PATH, "", false)
            }
        }

        stage('deploy') {
            steps {
                mavenDeploy(POM_PATH)
            }
        }

        stage('Create Release-Tag') {
            steps {
                gitCreateAndPushTag(JIRA_PROJECT_ID, TAGNAME, BRANCH)
            }
        }

        stage('Create GitLab Release') {
            steps {
                gitLabCreateMavenRelease(JIRA_PROJECT_ID, GITLAB_PROJECT_ID, TITLE_TEXT, RELEASE_VERSION, TAGNAME, POM_PATH)
            }
        }

        stage('Release Jira-Version') {
            steps {
                jiraReleaseVersion(JIRA_PROJECT_ID, RELEASE_VERSION)
            }
        }

        stage('Create New Jira-Version') {
            steps {
                jiraCreateNewVersion(JIRA_PROJECT_ID, NEW_VERSION)
            }
        }

        stage('UpdateProject with new Version') {
            steps {
                mavenSetVersion("${NEW_VERSION}-SNAPSHOT", POM_PATH)
                gitPushVersionUpdate(JIRA_PROJECT_ID, "${NEW_VERSION}-SNAPSHOT", BRANCH)
            }
        }
    }
    post {
        always {
            sendTeamsNotification(TEAMS_URL)
            sendEMailNotification(getPatientEMailList())
        }
    }
}

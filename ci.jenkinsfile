@Library('gematik-jenkins-shared-library') _

def BRANCH = 'main'
def JIRA_PROJECT_ID = 'LIBVAU'
def GITLAB_PROJECT_ID = '1470'
def TEAMS_URL = 'https://gematikde.webhook.office.com/webhookb2/01cda61b-5c5e-4000-ad6a-7b087feaf0e8@30092c62-4dbf-43bf-a33f-10d21b5b660a/JenkinsCI/f65f14ab85054df6bede10ab3f644ede/3f1bacaa-1f00-4f70-aab5-18e2d8723399'
def POM_PATH = 'pom.xml'

pipeline {

    options {
        disableConcurrentBuilds()
        buildDiscarder logRotator(artifactNumToKeepStr: '3', numToKeepStr: '3')
    }

    agent { label 'k8-backend-small' }

    stages {
        stage('Initialise') {
            steps {
                setProperties([notifyTeams(TEAMS_URL)])
                useJdk("OPENJDK17")
                gitSetIdentity()
            }
        }

        stage('gitCreateBranch') {
            when { branch BRANCH }
            steps {
                gitCreateBranch()
            }
        }

        stage('set Version') {
            steps {
                mavenSetSnapshotVersionFromJiraProject(JIRA_PROJECT_ID, POM_PATH)
            }
        }

        stage('Build') {
            steps {
                mavenBuild(POM_PATH)
            }
        }

        stage('Test') {
            steps {
                mavenVerify(POM_PATH)
            }
        }

        stage('Open Source Checks') {
            steps {
                openSourceGuidelineCheck()
            }
        }

        stage('OWASP') {
            steps {
                mavenOwaspScan(POM_PATH)
            }
        }

        stage('Sonar') {
            steps {
                mavenCheckWithSonarQube(POM_PATH, "", false)
            }
        }

        stage('deploy') {
            when { branch BRANCH }
            steps {
                mavenDeploy(POM_PATH)
            }
        }

        stage('Tag and Push CI-build') {
            when { branch BRANCH }
            steps {
                gitCreateAndPushTag(JIRA_PROJECT_ID)
            }
        }

        stage('GitLab-Update-Snapshot') {
            when { branch BRANCH }
            steps {
                gitLabUpdateMavenSnapshot(JIRA_PROJECT_ID, GITLAB_PROJECT_ID,  POM_PATH)
            }
        }
    }
    post {
        always {
            sendEMailNotification(getPatientEMailList())
            showJUnitAsXUnitResult()
        }
    }

}
